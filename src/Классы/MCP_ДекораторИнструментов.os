#Использовать decorator
#Использовать autumn
#Использовать asserts
#Использовать strings

Перем Рефлектор;

&Пластилин
Перем Поделка;

&Желудь
Процедура ПриСозданииОбъекта()
	Рефлектор = Новый Рефлектор();
КонецПроцедуры

Функция СоздатьИнструментПоАннотациямОбъекта(Аннотация, ДанныеЖелудя) Экспорт
	Декоратор = Новый ПостроительДекоратора(ДанныеЖелудя.Желудь);

	ПодготовитьИмяОписаниеИнструмента(Декоратор, ДанныеЖелудя, Аннотация);
	ПодготовитьСхемаИнструмента(Декоратор, ДанныеЖелудя);
	ПодготовитьВыполнитьИнструмент(Декоратор, ДанныеЖелудя);

	ГотоваяИнструмент = Декоратор.Построить();
	Возврат ГотоваяИнструмент;
КонецФункции

Процедура ПодготовитьИмяОписаниеИнструмента(ПостроительДекоратора, ДанныеЖелудя, Аннотация)
	ПарсерJSON = Новый ПарсерJSON();
	Если Не ЕстьМетод(ДанныеЖелудя.Желудь, "ИмяИнструмента") Тогда
		Имя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Имя");
		Метод = Новый Метод("ИмяИнструмента").Публичный();
		Метод.ТелоМетода(СтрШаблон("Возврат %1;", ПарсерJSON.ЗаписатьJSON(Имя)));
		ПостроительДекоратора.Метод(Метод);
	КонецЕсли;

	Если Не ЕстьМетод(ДанныеЖелудя.Желудь, "ОписаниеИнструмента") Тогда
		Описание = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Описание", "");
		Метод = Новый Метод("ОписаниеИнструмента").Публичный();
		Метод.ТелоМетода(СтрШаблон("Возврат %1;", ПарсерJSON.ЗаписатьJSON(Описание)));
		ПостроительДекоратора.Метод(Метод);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСхемаИнструмента(ПостроительДекоратора, ДанныеЖелудя)
	Если ЕстьМетод(ДанныеЖелудя.Желудь, "СхемаИнструмента") Тогда
		Возврат;
	КонецЕсли;

	ТелоМетода = Новый Массив;
	Свойства = ДанныеЖелудя.ОпределениеЖелудя.Свойства();

	ПарсерJSON = Новый ПарсерJSON();

	ТелоМетода.Добавить("Схема = Новый Соответствие();");
	ТелоМетода.Добавить("ОбязательныеПоля = Новый Массив();");

	Для Каждого Свойство из Свойства Цикл
		Аннотация = РаботаСАннотациями.ПолучитьАннотацию(Свойство, "ПараметрИнструмента");
		Если Аннотация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Имя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Имя",
			СтроковыеФункции.СтрокаЛатиницей(Свойство.Имя));
		Описание = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Описание", "");
		ЭтоМассив = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "ЭтоМассив", Ложь);
		Обязательный = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Обязательный", Ложь);
		Тип = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Тип", "string");
		Формат = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Формат", Неопределено, Истина);
		ТелоМетода.Добавить("ТекущийЭлемент = Новый Соответствие;");
		ТелоМетода.Добавить(СтрШаблон("Схема.Вставить(%1, ТекущийЭлемент);", ПарсерJSON.ЗаписатьJSON(Имя)));
		ТелоМетода.Добавить(СтрШаблон("ТекущийЭлемент.Вставить(""description"", %1);", ПарсерJSON.ЗаписатьJSON(Описание)));
		Если ЭтоМассив Тогда
			ТелоМетода.Добавить("ТекущийЭлемент.Вставить(""type"", ""array"");");
			ТелоМетода.Добавить("СхемаЭлементовМассива = Новый Соответствие();");
			ТелоМетода.Добавить("ТекущийЭлемент.Вставить(""items"", СхемаЭлементовМассива);");
			ТелоМетода.Добавить("ТекущийЭлемент = СхемаЭлементовМассива;");
		КонецЕсли;
		ТелоМетода.Добавить(СтрШаблон("ТекущийЭлемент.Вставить(""type"", %1);", ПарсерJSON.ЗаписатьJSON(Тип)));
		Если ЗначениеЗаполнено(Формат) Тогда
			ТелоМетода.Добавить(СтрШаблон("ТекущийЭлемент.Вставить(""format"", %1);", ПарсерJSON.ЗаписатьJSON(Формат)));
		КонецЕсли;
		Если Обязательный Тогда
			ТелоМетода.Добавить(СтрШаблон("ОбязательныеПоля.Добавить(%1);", ПарсерJSON.ЗаписатьJSON(Имя)));
		КонецЕсли;
	КонецЦикла;
	ТелоМетода.Добавить("Возврат Новый Структура(""type, properties, required"", ""object"", Схема, ОбязательныеПоля);");

	Метод = Новый Метод("СхемаИнструмента").Публичный();
	Метод.ТелоМетода(СтрСоединить(ТелоМетода, Символы.ПС));

	ПостроительДекоратора.Метод(Метод);
КонецПроцедуры

Процедура ПодготовитьВыполнитьИнструмент(ПостроительДекоратора, ДанныеЖелудя)
	Если ЕстьМетод(ДанныеЖелудя.Желудь, "ВыполнитьИнструмент") Тогда
		Возврат;
	КонецЕсли;

	ТелоМетода = Новый Массив;
	Свойства = ДанныеЖелудя.ОпределениеЖелудя.Свойства();

	Для Каждого Свойство из Свойства Цикл
		Аннотация = РаботаСАннотациями.ПолучитьАннотацию(Свойство, "ПараметрИнструмента");
		Если Аннотация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Имя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Имя",
			СтроковыеФункции.СтрокаЛатиницей(Свойство.Имя));
		
		ТелоМетода.Добавить(СтрШаблон("%1 = ПараметрыИнструмента.Получить(""%2"");", Свойство.Имя, Имя));
	КонецЦикла;

	МетодыВыполненияИнструмента = РаботаСАннотациями.НайтиМетодыСАннотацией(
													ДанныеЖелудя.ОпределениеЖелудя.Методы(), 
													"ВыполнениеИнструмента");

	Ожидаем.Что(МетодыВыполненияИнструмента).ИмеетДлину(1);
	ТелоМетода.Добавить("Возврат Инструмент." + МетодыВыполненияИнструмента[0].Имя + "();");

	Метод = Новый Метод("ВыполнитьИнструмент").Публичный();
	Метод.Параметр(Новый ПараметрМетода("Инструмент").ПоЗначению());
	Метод.Параметр(Новый ПараметрМетода("ПараметрыИнструмента").ПоЗначению());
	Метод.ТелоМетода(СтрСоединить(ТелоМетода, Символы.ПС));

	ПостроительДекоратора.Метод(Метод);

КонецПроцедуры

Функция ЕстьМетод(Инструмент, ИмяМетода)
	Возврат Рефлектор.МетодСуществует(Инструмент, ИмяМетода);
КонецФункции
